import React, { useState } from 'react';
import Note from './components/Note';

function App(props) {
  // App starts with props
  const [notes, setNotes] = useState(props.notes)
  const [newNote, setNewNote] = useState('')
  const [showAll, setShowAll] = useState(true)

  // when not using props
  // const [notes, setNotes] = useState([])

  // Adding HTML form
  // event = event that triggers the call to this function
  const addNote = (event) => {
    // prevent reloading the page
    event.preventDefault()
    console.log('button clicked', event.target)
    const noteObject = {
      content: newNote,
      date: new Date().toISOString(),
      important: Math.random() < 0.5,
      id: notes.length + 1,
    }

    // concat creates a new copy of array with the new item added to the end
    setNotes(notes.concat(noteObject))

    // resets the value of the controlled input element
    setNewNote('')
  }

  const handleNoteChange = (event) => {
    console.log(event.target.value)
    setNewNote(event.target.value)
  }

  // if showAll = true => notes
  // if showAll = false => only important notes
  const notesToShow = showAll
  ? notes
  // : notes.filter(note => note.important === true)
  : notes.filter(note => note.important)

  return (
    <div>
      <h1>Notes - Part2 - A</h1>
        <h3>First Example</h3>
        <ul>
          {/* NOT a smart way to do it */}
          {/* <li>{notes[0].content}</li>
          <li>{notes[1].content}</li>
          <li>{notes[2].content}</li> */}
          {
            // can use the note id to be key
            notes.map(note => 
            <li key={note.id}>
              {/* Element generated by map should each have a unique key by adding attribute called key */}
              {note.content}
            </li>)
          }
        </ul>
        
        <h3>Second Example</h3>
        <ul>
          {
            // can also use index of the array to be key
            // THIS IS *NOT* RECOMMENDED
            notes.map((note, i) =>
              <li key={i}>
                {note.content}
              </li>
            )
          }
        </ul>
        
        <h3>Third Example</h3>
        {/* THIRD WAY TO RENDER */}
        <ul>
          {notes.map(note =>
            <Note key={note.id} note={note} />
          )}
        </ul>
      <h1>Notes - Part2 - B - Forms</h1>
      <form onSubmit={addNote}>
        <input value={newNote} onChange={handleNoteChange} />
        <button type="submit">Save</button>
      </form>
      <h3>Filter - only show important note</h3>
        <div>
          {/* a button that change showAll to false/true */}
          <button onClick={() => setShowAll(!showAll)}>
            Show {showAll ? 'important' : 'all'}
          </button>
        </div>
        <ul>
          {notesToShow.map(note =>
            <Note key={note.id} note={note} />
          )}
        </ul>
    </div>
  );
} 

export default App;
